import time
import random
from collections import defaultdict

# -------------------------
# Game Implementation (class-based for testability)
# -------------------------
class FoodGachaGame:
    def __init__(self, rng_seed=None):
        # Use instance RNG so tests are deterministic when seeded
        self.rng = random.Random(rng_seed)

        # Flavor texts (kept for charm)
        self.q1 = "Just sad... ü•ó"
        self.q2 = "Just plain and dry. üçû"
        self.q3 = "Great with a bit of salt. üßÇüçÖ"
        self.q4 = "Legendary üåü"
        self.q5 = "VALID PLAYA ‚Äî that's a cool drink. üßäüòé"
        self.q6 = "My recipe just for you. üç®üéØ"

        # Item pools
        self.items = [
            # Commons
            'Burger', 'Salad', 'Apple', 'Soggy Lettuce', 'Bread crumbs', 'Banana', 'Strawberry', 'Grapes', 'Honeydew',
            'Pear', 'Toast', 'Yogurt', 'Carrot Sticks', 'Celery Sticks', 'Boiled Corn', 'Oatmeal', 'Cucumber Slices',
            'Granola Bar', 'Apple Sauce', 'Peanut Butter', 'Rice Cakes', 'Fruit Salad','Jelly'
            # Uncommons
            'tomatoe', 'Pizza Slice', 'Onion Rings', 'Mysterious Meatball', 'Pineapple', 'Watermelon', 'Mango', 'Peach',
            'Cherry', 'Kiwi', 'Chips and Salsa', 'Fried Rice', 'Ramen', 'Tacos', 'Avocado', 'Blueberry', 'Blackberry',
            'Nectarine', 'Olives', 'Plum', 'Sushi', 'Waffles', 'Zucchini Bread',
            # Rares
            'Fried Egg', 'Lemon', 'Coconut', 'Cheese', 'Guava', 'Lime', 'Papaya', 'Pomegranate', 'Quiche',
            # Legendaries
            'french fry', 'Popcorn', 'Pancakes', 'Pumpkin Pie', 'Golden Truffle', 'Dragonfruit Tart',
            # Secrets / Niche / Divine
            'ULTRA Slushie', 'GOLDEN Nugget', 'Ultra NICHE ICE cream', 'Chefs hat', 'Chocolate Cake', 'Donut',
            'Ice Cream Sundae', 'Mystic Macaron', 'Celestial Sorbet', 'Enchanted Eclair', 'Phantom Pudding',
            'Cosmic Cr√®me Br√ªl√©e', 'Divine Doughnut', 'Secret Saffron Rice', 'Noble Nougat'
        ]

        # Rarity classification
        self.rarity = {
            'Common': ['Burger','Salad','Apple','Soggy Lettuce','Bread crumbs','Banana','Strawberry','Grapes','Honeydew',
                       'Pear','Toast','Yogurt','Carrot Sticks','Celery Sticks','Boiled Corn','Oatmeal','Cucumber Slices',
                       'Granola Bar','Apple Sauce','Peanut Butter','Rice Cakes','Fruit Salad','Jelly'],
            'Uncommon': ['tomatoe','Pizza Slice','Onion Rings','Mysterious Meatball','Pineapple','Watermelon','Mango','Peach',
                         'Cherry','Kiwi','Chips and Salsa','Fried Rice','Ramen','Tacos','Avocado','Blueberry','Blackberry',
                         'Nectarine','Olives','Plum','Sushi','Waffles','Zucchini Bread'],
            'Rare': ['Fried Egg','Lemon','Coconut','Cheese','Guava','Lime','Papaya','Pomegranate','Quiche'],
            'Legendary': ['french fry','Popcorn','Pancakes','Pumpkin Pie','Golden Truffle','Dragonfruit Tart'],
            'Secret': ['ULTRA Slushie','GOLDEN Nugget','Ultra NICHE ICE cream','Chefs hat','Chocolate Cake','Donut',
                       'Ice Cream Sundae','Mystic Macaron','Celestial Sorbet','Enchanted Eclair','Phantom Pudding',
                       'Cosmic Cr√®me Br√ªl√©e','Divine Doughnut','Secret Saffron Rice','Noble Nougat']
        }

        # Precompute weights
        self.weights = []
        for food in self.items:
            if food in self.rarity['Common']:
                self.weights.append(15)
            elif food in self.rarity['Uncommon']:
                self.weights.append(8)
            elif food in self.rarity['Rare']:
                self.weights.append(4)
            elif food in self.rarity['Legendary']:
                self.weights.append(0.5)
            elif food in self.rarity['Secret']:
                self.weights.append(0.05)
            else:
                self.weights.append(1)

        # Trackers
        self.inventory = defaultdict(int)
        self.food_dex = set()
        self.pulls = 0
        self.pity_counter = 0
        self.achievements = set()
        self.completed_quests = set()
        self.extra_rolls = 0

        # Combos
        self.combos = {
            tuple(sorted(['Bread crumbs','Cheese'])): 'Cheese Sandwich',
            tuple(sorted(['Banana','Chocolate Cake'])): 'Banana Split',
            tuple(sorted(['Rice Cakes','Peanut Butter'])): 'PB Rice Cake',
            tuple(sorted(['tomatoe','Cheese','Bread crumbs'])): 'Bruschetta'
            tuple(sorted(['Peanut Butter', 'Jelly', 'Bread crumbs'])): 'PB Sandwich'
        }

        # Mini-quests
        self.quests = {
            'Fruit Trio': {'required': ['Banana','Strawberry','Mango'], 'reward_free_rolls': 1},
            'Fast Food Fan': {'required': ['Burger','Pizza Slice','Tacos'], 'achievement': 'üçî Fast Food King'}
            'Noblity': {'required': ['Noble Nougat', 'Secret Saffron Rice'],'achievement': 'reward_free_rolls': 5}
        }

    # ---------- Helpers ----------
    def get_rarity(self, item):
        for r, pool in self.rarity.items():
            if item in pool:
                return r
        return 'Common'

    def rarity_stars(self, r):
        return {
            'Common': '‚≠ê',
            'Uncommon': '‚≠ê‚≠ê',
            'Rare': '‚≠ê‚≠ê‚≠ê',
            'Legendary': 'üåüüåüüåüüåü',
            'Secret': '‚ú®‚ú®‚ú®‚ú®‚ú®'
        }.get(r, '‚≠ê')

    # ---------- Core actions ----------
    def roll(self):
        self.pulls += 1
        self.pity_counter += 1

        if self.pity_counter >= 10:
            choices = list(self.rarity['Rare']) + list(self.rarity['Legendary']) + list(self.rarity['Secret'])
            item = self.rng.choice(choices)
            self.pity_counter = 0
        else:
            item = self.rng.choices(self.items, weights=self.weights, k=1)[0]

        self.inventory[item] += 1
        self.food_dex.add(item)

        r = self.get_rarity(item)
        stars = self.rarity_stars(r)

        if r in ['Legendary', 'Secret']:
            print("\nüåü‚ú®‚ú®‚ú® A RARE FIND! ‚ú®‚ú®‚ú®üåü")
        print(f"\nüçΩÔ∏è You got: {item} [{r} {stars}]")

        if self.inventory[item] > 1:
            print(f"(Again?! The {item} loves you üòÖ)")

        self._process_post_roll()
        return item, r

    def multi_pull(self, n=10):
        print(f"\nüîÆ Rolling {n} times...")
        for _ in range(n):
            self.roll()
            time.sleep(0.05)

    def force_add(self, item):
        self.inventory[item] += 1
        self.food_dex.add(item)
        print(f"\n[FORCED] Added: {item}")
        self._process_post_roll(force=True)

    # ---------- Post-roll processing ----------
    def _process_post_roll(self, force=False):
        self._check_combos()
        self._check_quests()
        self._check_achievements()
        while self.extra_rolls > 0:
            self.extra_rolls -= 1
            print('\nüéÅ Quest reward: bonus roll!')
            self.roll()

    def _check_combos(self):
        changed = True
        while changed:
            changed = False
            for req_tuple, result in list(self.combos.items()):
                reqs = list(req_tuple)
                if all(self.inventory.get(r, 0) >= 1 for r in reqs):
                    for r in reqs:
                        self.inventory[r] -= 1
                        if self.inventory[r] <= 0:
                            del self.inventory[r]
                    self.inventory[result] += 1
                    self.food_dex.add(result)
                    print(f"\nüß© Combo Unlocked: {result} (from {', '.join(reqs)})")
                    changed = True
                    break

    def _check_quests(self):
        for name, desc in self.quests.items():
            if name in self.completed_quests:
                continue
            required = desc.get('required', [])
            if all(self.inventory.get(r, 0) >= 1 for r in required):
                print(f"\n‚úÖ Quest completed: {name}")
                self.completed_quests.add(name)
                if desc.get('reward_free_rolls'):
                    self.extra_rolls += desc['reward_free_rolls']
                if desc.get('achievement'):
                    self.achievements.add(desc['achievement'])

    def _check_achievements(self):
        total_known = set(self.items) | set(self.combos.values())
        if total_known.issubset(self.food_dex):
            self.achievements.add('üçΩÔ∏è Master Chef ‚Äî Collected All Foods!')
        if all(x in self.food_dex for x in ['Banana','Strawberry','Mango']):
            self.achievements.add('ü•≠ Fruit Master')
        if all(x in self.food_dex for x in ['Golden Truffle','Dragonfruit Tart']):
            self.achievements.add('üíé Legendary Connoisseur')
        if all(x in self.food_dex for x in ['Golden Nugget', 'Divine Doughnut']):
             self.achievements.add('GOLDEN Donut')
        if all(x in self.food_dex for x in ['Secret Saffron Rice', 'Fried Egg'])
             self.achievements.add('Egg fried Saffron Rice')
            
    # ---------- UI helpers ----------
    def show_dex(self):
        print(f"\nüìñ Food Dex: {len(self.food_dex)}/{len(set(self.items) | set(self.combos.values()))} discovered")
        rows = []
        for item in sorted(self.food_dex):
            rows.append(f"{item} x{self.inventory.get(item, 0)}")
        print(', '.join(rows) if rows else '(none)')

    def show_achievements(self):
        self._check_achievements()
        if self.achievements:
            print('\nüèÜ Achievements:')
            for a in sorted(self.achievements):
                print(f"- {a}")
        else:
            print('\nNo achievements yet!')

# -------------------------
# Main execution
# -------------------------

def main():
    g = FoodGachaGame(rng_seed=42)

    print('Interactive mode: press Enter for 1 pull, type "10" for multi-pull, "multi N" for custom multi, "dex" for Food Dex, "ach" for achievements, or "quit" to exit.')
    while True:
        cmd = input("\n>> ").strip()

        if cmd == "":   # just pressing Enter
            g.roll()
        elif cmd == "10":
            g.multi_pull(10)
        elif cmd.lower().startswith("multi"):
            parts = cmd.split()
            n = 10 if len(parts) == 1 else int(parts[1])
            g.multi_pull(n)
        elif cmd.lower() == "dex":
            g.show_dex()
        elif cmd.lower() == "ach":
            g.show_achievements()
        elif cmd.lower() == "quit":
            break
        else:
            print(f"(unknown command: {cmd})")

    print("\n--- Session Summary ---")
    print(f"Total pulls performed: {g.pulls}")
    print(f"Unique items discovered: {len(g.food_dex)}")
    if g.food_dex:
        print("Sample of discovered items:", ', '.join(sorted(list(g.food_dex))[:10]))
    if g.achievements:
        print("\nAchievements earned:")
        for a in sorted(g.achievements):
            print("-", a)
    print("\nThank you for playing!")

if __name__ == '__main__':
    main()
